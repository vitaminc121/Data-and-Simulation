###### These codes aims for valiating the predictive performance of feature proteins

###1.1 load packages
library(readxl)

###1.2 prepare the data which has been selected
data1 <- read.csv("proteins_data.csv")
# split data1 into train sub-data and validation sub-dara
train_sub <- sample(nrow(data1),7/10*nrow(data1))
train_data <- data1[train_sub,]
test_data <- data1[-train_sub,]


### 2.1 xgboot algorithm 
#install.packages("xgboost")
library(xgboost)
library(Matrix)

# data pretreatment for train data, and change independent variables into matrix
traindata1 <- data.matrix(train_data[,c(2:10)])
# change 'traindata1' into sparse matrix by using Matrix function
traindata2 <- Matrix(traindata1,sparse = T)
# get respondents
traindata3 <- train_data[,11]
# list the independent variables and respondents
traindata4 <- list(data = traindata2,label = traindata3)
# construct object for xgb.DMatrix,the object is sparse matrix
dtrain <- xgb.DMatrix(data = traindata4$data,label = traindata4$label)

# data pretreatment for test data
# change independent variables into matrix
testset1 <- data.matrix(test_data[,c(2:10)])
# change 'traindata1' into sparse matrix by using Matrix function
testset2 <- Matrix(testset1,sparse = T)
# get respondents
testset3 <- test_data[,11]
# list the independent variables and respondents
testset4 <- list(data = testset2,label=testset3)
# construct object for xgb.DMatrix,the object is sparse matrix
dtest <- xgb.DMatrix(data = testset4$data,label = testset4$label)
#  model
xgb <- xgboost(data = dtrain,max_depth=6, eta=0.5,  objective='binary:logistic', nround=25)

# predict in test data
pre_xgb <- round(predict(xgb, newdata = dtest))
# output the confusion matrix
table(test_data$depression,pre_xgb,dnn=c("Dep","nDep"))

# plot ROC and calculate AUC
library(pROC)
xgboost_roc <- roc(test_data$depression,as.numeric(pre_xgb))
plot(xgboost_roc,print.auc=TRUE, auc.polygon=TRUE,grid=c(.1,.2),
     grid.col=c("green","red"),max.auc.polygon=TRUE,
     auc.polygon.col="skyblue",print.thres = TRUE,
     main = "performance of xgboost model")


### 2.2 BPNN model
# load packages
library(grid)
library(MASS)
library(neuralnet)
# model1
net <- neuralnet(depression ~ P558+P48637+Q14676+AA87WSY6+O15144+J3QRN2+Q99784+B7ZKJ8+AA3B3IRN5,
                 data = train_data,
                 hidden = 1,threshold = 0.005,learningrate = 0.1,
                 algorithm = "rprop+",err.fct = "sse",
                 act.fct = "logistic")
#print(net)
# plot
#plot(net)
# predict in test data
pre_net <-  round(predict(net, newdata = test_data))
# output the confusion matrix
table(test_data$depression,pre_net,dnn=c("Dep","nDep"))

# plot ROC and calculate AUC
library(pROC)
net_roc <- roc(test_data$depression,as.numeric(pre_net))
plot(net_roc,print.auc=TRUE, auc.polygon=TRUE,grid=c(.1,.2),
     grid.col=c("green","red"),max.auc.polygon=TRUE,
     auc.polygon.col="skyblue",print.thres = TRUE,
     main = "performance of BPNN model")


### 2.3 SVM model
# load packages
library(e1071)
# pretreatment for data
train_data$depression <- as.factor(train_data$depression)
test_data$depression <- as.factor(test_data$depression)
# model
svm_model <- svm(depression ~  P558+  P48637+ Q14676+ AA87WSY6+ O15144 +J3QRN2+   Q99784+B7ZKJ8+AA3B3IRN5,
                 data = train_data,
                 type = "C", kernel = "radial")
# predict in test data
pre_svm <-  predict(svm_model, newdata = test_data)
# intergrate true value and predict value
obs_p_svm <-  data.frame(prob=pre_svm,obs=test_data$depression)
# output the confusion matrix
table(test_data$depression,pre_svm,dnn=c("Dep","nDep"))

# plot ROC and calculate AUC
library(pROC)
svm_roc <- roc(test_data$depression,as.numeric(pre_svm))
plot(svm_roc,print.auc=TRUE, auc.polygon=TRUE,grid=c(.1,.2),
     grid.col=c("green","red"),max.auc.polygon=TRUE,
     auc.polygon.col="skyblue",print.thres = TRUE,
     main = "performance of SVM model")


### 2.4 randomForest model
# library package
library(randomForest)
# pretreatment for data
train_data$depression <- as.factor(train_data$depression)
test_data$depression <- as.factor(test_data$depression)
# model
rf_model <- randomForest(depression ~  P558+  P48637+ Q14676+ AA87WSY6+ O15144 +J3QRN2+   Q99784+B7ZKJ8+AA3B3IRN5,
                 data = train_data,
                 ntree = 500,
                 ntry = 3,
                 importance = TRUE,
                 proximity = TRUE)
# check the importance of independent variables
rf_model$importance
varImpPlot( rf_model,main = "variable importance")
# predict in test data
pre_rf <-  predict(rf_model, newdata = test_data)
# intergrate true value and predict value
obs_p_rf <-  data.frame(prob=pre_rf,obs=test_data$depression)
# output the confusion matrix
table(test_data$depression,pre_rf,dnn=c("Dep","nDep"))
# plot ROC and calculate AUC
library(pROC)
rf_roc <- roc(test_data$depression,as.numeric(pre_rf))
plot(rf_roc,print.auc=TRUE, auc.polygon=TRUE,grid=c(.1,.2),
     grid.col=c("green","red"),max.auc.polygon=TRUE,
     auc.polygon.col="skyblue",print.thres = TRUE,
     main = "performance of rf model:mtry=3,ntree=500")


### 2.5 logistic regression
# model
lg_model <- glm(depression ~  P558+  P48637+ Q14676+ AA87WSY6+ O15144 +J3QRN2+   Q99784+B7ZKJ8+AA3B3IRN5,
                 data = train_data,
                 family = binomial(link = "logit"))

# predict in test data
pre_lg <-  predict(lg_model, newdata = test_data)
# intergrate true value and predict value
obs_p_lg <-  data.frame(prob=pre_lg,obs=test_data$depression)
# output the confusion matrix
table(test_data$depression,pre_lg,dnn=c("Dep","nDep"))
# plot ROC and calculate AUC
library(pROC)
lg_roc <- roc(test_data$depression,as.numeric(pre_lg))
plot(lg_roc,print.auc=TRUE, auc.polygon=TRUE,grid=c(.1,.2),
     grid.col=c("green","red"),max.auc.polygon=TRUE,
     auc.polygon.col="skyblue",print.thres = TRUE,
     main = "performance of lg model")


### 3 plot means of AUC for models.
library(readxl)
xgb_d <- read.csv("proteins_data.csv/simulation mean for xgb")
bpnn_d <- read.csv("proteins_data.csv/simulation mean for bpnn")
svm_d <- read.csv("proteins_data.csv/simulation mean for svm")
rf_d <- read.csv("proteins_data.csv/simulation mean for rf")
lr_d <- read.csv("proteins_data.csv/simulation mean for lr")

# dataset pretreatment---rename variable
names(xgb_d)[1] <- "ID"
names(xgb_d)[2] <- "XGBoost"
as.data.frame(xgb_d)

names(bpnn_d)[1] <- "ID"
names(bpnn_d)[2] <- "BPNN"
as.data.frame(bpnn_d)

names(svm_d)[1] <- "ID"
names(svm_d)[2] <- "SVM"
as.data.frame(svm_d)

names(rf_d)[1] <- "ID"
names(rf_d)[2] <- "RF"
as.data.frame(rf_d)

names(lr_d)[1] <- "ID"
names(lr_d)[2] <- "LR"
as.data.frame(lr_d)

# dataset pretreatment---integrate 5 dataset
d12 <- merge(xgb_d,bpnn_d)
d123 <- merge(d12,svm_d)
d1234 <- merge(d123,rf_d)
d5 <- merge(d1234,lr_d)


# plot boxplot by using ggplot2
#install.packages("gridExtra")
#install.packages("gapminder")
library(ggplot2)
library(gridExtra)
library(gapminder)
library(dplyr)
d5 <- d5[,-1]
p1 <- boxplot(d5,col = c('blue','green','orange','yellow','purple'), main = "Boxplot for AUC of 5 models")
names(d5)
d5$ID <- c(1:200)
mydata <- melt(d5,   
               id.vars='ID',   
               variable.name="models",
               value.name="AUC")

# install.packages("RColorBrewer")
library(RColorBrewer)
ggplot(mydata, aes(x = models, y = AUC)) +
  geom_boxplot() +
  theme_minimal()

# more parameters to improve the plot
ggplot(mydata, aes(x = models, y = AUC)) + 
  geom_boxplot(fill = brewer.pal(5, "Set2"))  +  
  labs(x= "models", y = "AUC", title = "Mean values of AUC of 5 models") + 
  theme(plot.title = element_text(hjust = 0.5)) 



# plot for CIs of AUC of models
xgb_d <- read.csv("proteins_data.csv/simulation ci for xgb")
bpnn_d <- read.csv("proteins_data.csv/simulation ci for bpnn")
svm_d <- read.csv("proteins_data.csv/simulation ci for svm")
rf_d <- read.csv("proteins_data.csv/simulation ci for rf")
lr_d <- read.csv("proteins_data.csv/simulation ci for lr")

# dataset pretreatment---rename variable
names(xgb_d)[1] <- "ID"
names(xgb_d)[2] <- "XGBoost"
as.data.frame(xgb_d)

names(bpnn_d)[1] <- "ID"
names(bpnn_d)[2] <- "BPNN"
as.data.frame(bpnn_d)

names(svm_d)[1] <- "ID"
names(svm_d)[2] <- "SVM"
as.data.frame(svm_d)

names(rf_d)[1] <- "ID"
names(rf_d)[2] <- "RF"
as.data.frame(rf_d)

names(lr_d)[1] <- "ID"
names(lr_d)[2] <- "LR"
as.data.frame(lr_d)

# dataset pretreatment---integrate 5 dataset
d12 <- merge(xgb_d,bpnn_d)
d123 <- merge(d12,svm_d)
d1234 <- merge(d123,rf_d)
d5 <- merge(d1234,lr_d)

d5 <- d5[,-1]
d5$ID <- c(1:29)
mydata2 <- melt(d5,   
               id.vars='ID', 
               variable.name="models"
               value.name="AUC")
mydata2 <- mydata2[-c(1:29),]
# install.packages("RColorBrewer")
library(RColorBrewer)
ggplot(mydata2, aes(x = models, y = AUC)) +
  geom_boxplot() +
  theme_minimal()

ggplot(mydata2, aes(x = models, y = AUC)) + 
  geom_boxplot(fill = brewer.pal(5, "Set2"))  +  
  labs(x= "models", y = "AUC", title = "CI of AUC of 5 models") + 
  theme(plot.title = element_text(hjust = 0.5)) #


# roc
#install.packages("plotROC")
library(plotROC)
longtest <-  melt_roc(data,"depression",c(2:10))
head(longtest)
longtest$protein <- longtest$name
p2 <- ggplot(longtest,aes(d=D,m=M,color = protein))+
    geom_roc(size = 0.5, labelsize = 3, pointsize = 0.3, labels = FALSE)+
    style_roc(xlab = 'False Positive Fraction', ylab = "True Positive Fraction",
              guide = FALSE) + 
   labs(title = "ROC of 9 proteins")+
   theme(plot.title = element_text(hjust = 0.5)) 
p2

# more parameters for polish
p3 <- ggplot(data_long,aes(y=num,x=depression))+
  geom_boxplot(aes(fill=depression))+
  labs(x = "State of Depression", y='Protein Content', title = 'Comparisons of protein contents in terms of the state of depression')+
  facet_wrap(~index,scales = "free")+
  guides(fill="none")+
  theme(plot.title = element_text(hjust = 0.5))

p3


# 4 plot the Spearman correlations
depression_select_100 <- read.csv("proteins_data.csv") # load the dataset again
#install.packages('Hmisc')
library(Hmisc)
spearman_cor <- function(data){
  s_cor <- vector()
  for (i in 1:9) {
    s_cor[i] <- cor(data[,i],data[,10])
  }
  return(s_cor)
}
spearman_cor2 <- function(data){
  s_cor <- vector()
  s_cor_p <- vector()
  for (i in 1:9) {
    rcorr <- rcorr(data[,i],data[,10])
    s_cor[i] <- rcorr$r[1,2]
    s_cor_p[i] <- rcorr$P[1,2]
  }
  list=list(cor=s_cor,p=s_cor_p)
  return(list)
}
cor <- spearman_cor2(depression_select_100)$cor
cor <- spearman_cor(depression_select_100)
color <- c(1,1,0,1,0,1,1,1,0)
cor <- cbind(cor,colnames(depression_select_100)[1:9],color)
cor <- as.data.frame(cor)
cor[,1] <- as.numeric(cor[,1])
colnames(cor) <- c("Spearmean_corr.coeff","name","color")
cor[,2] <- as.factor(cor[,2])

p4 <- ggplot(data = cor,aes(x=name,y=Spearmean_corr.coeff,fill=color))+
  geom_bar(stat ="identity")+
  coord_flip()+
  scale_x_discrete(limits=c("Q99784","P558" ,"B7ZKJ8",
                            "P48637","AA87WSY6","J3QRN2",
                            "Q14676","AA3B3IRN5","O15144"))+
  labs(x = "Proteins", y='Coefficients of Spearman correlation', title = 'Values of Spearman correlation')+
  guides(fill="none")+
  theme(plot.title = element_text(hjust = 0.5))

p4

#Construct the table in the paper
pp <- spearman_cor2(depression_select_100)$p
cc <- spearman_cor2(depression_select_100)$cor
df <- as.data.frame(cbind(colnames(depression_select_100)[1:9],cc,pp))
df[,2] <- as.numeric(df[,2])
df[,3] <- as.numeric(df[,3])
colnames(df) <- c("Protein","Spearmean_corr.coeff","p.value")



















